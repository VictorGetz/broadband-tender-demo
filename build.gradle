buildscript {
    ext {
        springBootVersion = '2.1.2.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id "com.palantir.docker" version "0.21.0"
}

apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'org.springframework.boot'

repositories {
    mavenCentral()
}

allprojects {
    group 'com.impresssol.broadband'
    version '0.0.7-SNAPSHOT'

    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    compileJava.options.encoding = 'UTF-8'

    dependencies {
        annotationProcessor 'org.projectlombok:lombok:1.18.4'
        compileOnly 'org.projectlombok:lombok'
        testCompile('org.springframework.boot:spring-boot-starter-test')
        compile "org.springframework.boot:spring-boot-configuration-processor"
        compile("com.h2database:h2")
    }

    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile 'org.springframework.data:spring-data-rest-hal-browser'
    compile 'org.flywaydb:flyway-core'
    compile 'com.microsoft.sqlserver:mssql-jdbc:6.4.0.jre8'
    compile project(':tender-model')
    compile project(':tender-seed')
    compile project(':tender-service')
}


// Build Frontend Project and Copy Artifacts
task buildAndCopyFrontend(type: Exec) {
    dependsOn processResources
    commandLine 'sh', 'buildAndCopyFrontend.sh'
}

bootJar.dependsOn(buildAndCopyFrontend)

// Create Docker Image PegasusGasDockerRegistryfrom Dockerfile and the Spring Boot Jar
task unpack(type: Copy) {
    dependsOn bootJar
    from(tasks.bootJar.outputs.files.singleFile)
    into("build/dependency")
}
docker {
//    name "impresssoldockerregistry.azurecr.io/broadband-tender-demo:${version}"
    name "pegasusgasdockerregistry.azurecr.io/broadband-tender-demo:${version}"
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}


// Publish the resulting Artifact to the Repository (we do not have a Repository currently)
publishing {
    publications {
        bootJava(MavenPublication) {
            artifact bootJar
        }
    }
    repositories {
        maven {
            url 'https://RepoReplaceMeLater.com'
        }
    }
}


